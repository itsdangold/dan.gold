---
import Logo from './Logo.astro';
---

<header class="site-header">
  <Logo />

  <nav>
    <a href="#" data-link="intro" class="label">Intro</a>
    <a href="#work" data-link="work" class="label">Work</a>
    <a href="#about" data-link="about" class="label">About</a>
  </nav>

  <div class="site-header__callout">
    <p class="label">Available for work</p>
    <button class="copy label" aria-label="Copy email" type="button">hello@dan.gold</button>
  </div>

  <div class="site-header__time">
    <p class="label">Based in California</p>
    <time class="label"></time>
  </div>
</header>

<script>
  const header = document.querySelector('.site-header');
  const logo = document.querySelector('.nav-logo');
  const sections = [...document.querySelectorAll('section')];
  const lettersInner = document.querySelectorAll('.letter');

  // ############################
  // Clock
  // ############################
  function updateClock() {
    const clock = document.querySelector('time');
    
    clock.textContent = new Date().toLocaleTimeString('en-US', {
      timeZone: 'America/Los_Angeles',
      timeZoneName: 'short',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    });
  }

  updateClock();
  setInterval(updateClock, 1000); 
  
  // ############################
  // Theme switcher
  // ############################
  const themeContainer = document.querySelector('[data-theme]');
  const themes = ["light", "dark", "blueprint", "international", "neo"];
  let i = 1;

  logo.addEventListener('click', () => {
    if (i == themes.length) {
      i = 0;
    }
    themeContainer.setAttribute("data-theme", themes[i]);
    i++;
  })

  // ############################
  // Hue rotate
  // ############################

  let hue = 270;

  function hueRotate() {
    document.documentElement.style.setProperty("--hue", hue);
    hue+=2;

    if (hue > 360) {
      hue = 0;
    }
  }
  
  setInterval(() => {
    if (document.hasFocus()) {
      requestAnimationFrame(hueRotate);
    }
  }, 1000 / 4);
  
  // ############################
  // Shadow position
  // ############################
  let scrollYPos = 0;

  const scrollShadow = new IntersectionObserver(() => {
    scrollYPos = Math.round(window.scrollY);

    if (scrollYPos > 100) {
      scrollYPos = 100;
    }
    
    document.documentElement.style.setProperty("--scrollY-pos", scrollYPos);
  }, {
    rootMargin: "-70% 0px 0px 0px",
    threshold: Array.from(Array(101), (_,x) => x/100)
  });
  
  scrollShadow.observe(document.querySelector('.scroll-shadow-position'));

  // ############################
  // Add active style to nav links based on section visibility
  // ############################
  const linkSwitcher = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const sectionId = entry.target.getAttribute('class');
      const correspondingLink = document.querySelector(`[data-link="${sectionId}"]`);

      if (!entry.isIntersecting && sectionId == 'work' && entry.boundingClientRect.top > (window.innerHeight * .3)){
        document.querySelectorAll('nav a').forEach(link => link.classList.remove('active'));
        document.querySelector("[data-link='intro']").classList.add('active');
      }

      if (!entry.isIntersecting && sectionId == 'about' && entry.boundingClientRect.top > (window.innerHeight * .3) && document.querySelector('.work').getBoundingClientRect().top > (window.innerHeight * .3)){
        document.querySelectorAll('nav a').forEach(link => link.classList.remove('active'));
        document.querySelector("[data-link='intro']").classList.add('active');
      }
      
      if (correspondingLink) {
        if (entry.isIntersecting) {
          // Remove 'active' class from all links
          document.querySelectorAll('nav a').forEach(link => link.classList.remove('active'));
          // Add 'active' class to the current link
          correspondingLink.classList.add('active');
        }
      }
    });
  }, {
    root: null,
    rootMargin: '-30% 0px -70% 0px',
    threshold: 0
  });

  sections.forEach(section => {
    linkSwitcher.observe(section);
  });

  // ############################
  // Keypresses to activate letters
  // ############################
  let pos = 0;

  document.addEventListener('keyup', (e) => {
    const key = e.key.toUpperCase();
    
    lettersInner.forEach((letter, index) => {
      letter.classList.remove('active');
      
      if (letter.getAttribute('data-letter').toUpperCase() == key) {
        letter.classList.add('active');

        let timeoutId;

        // Clear existing timeout if it's running
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        // Set new timeout
        timeoutId = setTimeout(() => {
          letter.classList.remove('active');
          timeoutId = null;
        }, 200);
        
        if (key == 'D' && index !== pos) {
          letter.classList.remove('active');                      
        }
        
        if (key == 'L') {
          toggleLines();
        }
      }
    });

    if (key == 'D') {
      pos == 0 ? pos = lettersInner.length - 1 : pos = 0;
    }
  });
  
  // ############################
  // Mouse tracker
  // ############################

  let linesVisible = false;
  let lines = document.querySelector('.lines');

  function toggleLines() {
    lines.classList.toggle('lines--active');

    linesVisible == false ? linesVisible = true : linesVisible = false;

    if (linesVisible == true) {
      window.addEventListener('mousemove', trackMouse);
    } else {
      window.removeEventListener('mousemove', trackMouse);
    }
  }
  
  function trackMouse() {
    document.documentElement.style.setProperty("--mouseX-pos", window.event.clientX);
    document.documentElement.style.setProperty("--mouseY-pos", window.event.clientY);
  }

  document.querySelector("[data-letter='l']").addEventListener('click', () => {
    toggleLines();
  });

  // ############################
  // Copy email to clipboard
  // ############################
  document.querySelectorAll('.copy').forEach(button => {
    let timeoutId;

    button.addEventListener('click', () => {
      navigator.clipboard.writeText(button.textContent);
      button.classList.add('copied');

      // Clear existing timeout if it's running
      if (timeoutId) {
        clearTimeout(timeoutId);
      }

      // Set new timeout
      timeoutId = setTimeout(() => {
        button.classList.remove('copied');
        timeoutId = null;
      }, 3000);
    });
  });

  // ############################
  // Copy email to clipboard
  // ############################

  const lazyImages = document.querySelectorAll('.lazy');

  const lazyLoad = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const src = entry.target.getAttribute("data-src");
        entry.target.setAttribute('src', src);
        
        const srcset = entry.target.getAttribute("data-srcset");

        if (srcset != null) {
          entry.target.setAttribute('srcset', srcset);
        }

        entry.target.classList.add('lazy--loaded');
        lazyLoad.unobserve(entry.target);
      }
    });
  }, {
    rootMargin: "50% 0px 50% 0px"
  });

  lazyImages.forEach(image => {
    lazyLoad.observe(image);
  });

</script>