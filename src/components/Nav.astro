---
import Logo from './Logo.astro';
---

<header class="site-header">
  <Logo />

  <nav>
    <a href="#intro">Intro</a>
    <a href="#work">Work</a>
    <a href="#about">About</a>
    <button class="copy" aria-label="Copy email">hello@dan.gold</button>
  </nav>
</header>

<script>
  const header = document.querySelector('.site-header');
  const logo = document.querySelector('.nav-logo');
  const sections = [...document.querySelectorAll('section')];
  const letters = document.querySelector('.intro h1');
  const lettersInner = document.querySelectorAll('.letter');
  
  // ############################
  // Theme switcher
  // ############################
  const themeContainer = document.querySelector('[data-theme]');
  const themes = ["light", "dark", "blueprint", "international", "neo"];
  let i = 1;

  logo.addEventListener('click', () => {
    if (i == themes.length) {
      i = 0;
    }
    themeContainer.setAttribute("data-theme", themes[i]);
    i++;
  })

  // ############################
  // Shadow position
  // ############################
  let scrollYPos = 0;

  const scrollShadow = new IntersectionObserver(() => {
    scrollYPos = Math.round(window.scrollY);
    letters.style.setProperty("--scrollY-pos", scrollYPos);
  }, {threshold: Array.from(Array(1000), (_,x) => x/1000)});
  
  scrollShadow.observe(document.querySelector('.intro'));
  
  // ############################
  // Add nav background on scroll
  // ############################
  let navBG = new IntersectionObserver(entries => {
    if (entries[0].isIntersecting) {
      header.classList.remove('project-visible');
    } else {
      header.classList.add('project-visible');
    }
  }, {rootMargin: `${header.getBoundingClientRect().height * -1}px 0px ${document.body.offsetHeight}px 0px`});

  navBG.observe(document.querySelector(".scroll-position"));

  // ############################
  // Add active style to nav links based on section visibility
  // ############################
    const observerOptions = {
    root: null,
    rootMargin: '-50% 0px -50% 0px',
    threshold: 0
  };

  const linkSwitcher = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const sectionId = entry.target.getAttribute('id');
      const correspondingLink = document.querySelector(`nav a[href="#${sectionId}"]`);
      
      if (correspondingLink) {
        if (entry.isIntersecting) {
          // Remove 'active' class from all links
          document.querySelectorAll('nav a').forEach(link => link.classList.remove('active'));
          // Add 'active' class to the current link
          correspondingLink.classList.add('active');
        }
      }
    });
  }, observerOptions);

  sections.forEach(section => {
    linkSwitcher.observe(section);
  });

  // ############################
  // Keypresses to activate letters
  // ############################
  let pos = 0;

  document.addEventListener('keyup', (e) => {
    const key = e.key.toUpperCase();
    
    lettersInner.forEach((letter, index) => {
      letter.classList.remove('active');
      
      if (letter.getAttribute('data-letter').toUpperCase() == key) {
        letter.classList.add('active');

        let timeoutId;

        // Clear existing timeout if it's running
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        // Set new timeout
        timeoutId = setTimeout(() => {
          letter.classList.remove('active');
          timeoutId = null;
        }, 200);
        
        if (key == 'D' && index !== pos) {
          letter.classList.remove('active');                      
        }
      }
    });

    if (key == 'D') {
      pos == 0 ? pos = lettersInner.length - 1 : pos = 0;
    }
  });

  // ############################
  // Copy email to clipboard
  // ############################
  document.querySelectorAll('.copy').forEach(button => {
    let timeoutId;

    button.addEventListener('click', () => {
      navigator.clipboard.writeText(button.textContent);
      button.classList.add('active');

      // Clear existing timeout if it's running
      if (timeoutId) {
        clearTimeout(timeoutId);
      }

      // Set new timeout
      timeoutId = setTimeout(() => {
        button.classList.remove('active');
        timeoutId = null;
      }, 3000);
    });
  });
</script>